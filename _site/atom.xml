<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A Bit Curious]]></title>
  <link href="https://github.com/leogzyl/leogzyl.github.io/atom.xml" rel="self"/>
  <link href="https://github.com/leogzyl/leogzyl.github.io/"/>
  <updated>2022-12-26T15:56:28+00:00</updated>
  <id>https://github.com/leogzyl/leogzyl.github.io/</id>
  <author>
    <name><![CDATA[Leo Gzyl]]></name>
    <email><![CDATA[leogzyl@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pythonic Anti-IF: Single Dispatch]]></title>
    <link href="https://github.com/leogzyl/leogzyl.github.io/blog/2022/12/26/python-single-dispatch/"/>
    <updated>2022-12-26T12:10:00+00:00</updated>
    <id>https://github.com/leogzyl/leogzyl.github.io/blog/2022/12/26/python-single-dispatch</id>
    <content type="html"><![CDATA[<p>A bunch of years ago, I became aware of the <a href="https://francescocirillo.com/products/the-anti-if-campaign#">Anti-IF campaign</a>. It was (and still is) an excellent practice in any software project.</p>

<p>At the time, I was doing a lot of OOP. I recall advocates of the Anti-IF campaign claimed something along the lines of:</p>

<p><em>"Every time you use an IF statement, you miss an opportunity to use polymorphism".</em></p>

<p>It seemed a little extreme to apply this when dealing with <em>any</em> IF statement, though.</p>

<p>Recently I was working on a Python library for document analysis where I wanted to make the user interface as simple as possible. After some configuration, the end-user would call a single method with a single parameter (a document to be analyzed), the type of the parameter being:</p>

<ul>
<li><code>str</code>: a path to a document (local file or URI)</li>
<li><code>pathlib.Path</code>: a path to a local file</li>
<li><code>bytes</code>: a stream of bytes representing the document</li>
<li><code>BytesIO</code>: In memory buffer with contents representing the document</li>
<li>a file-like object resulting from <code>open</code>ing the document in binary mode</li>
</ul>


<p>The actual analysis was performed by backend providers that had APIs for either binary data or URLs, so I needed to accommodate the above into one of those two categories.</p>

<p>A first short-lived implementation started out as something like this (uglier code omitted):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">BinaryIO</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">utils</span> <span class="kn">import</span> <span class="n">is_local_file</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AbstractDocumentAnalyzer</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@abstractmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_from_url</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">document</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot; Provide results when document is a URL &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@abstractmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_from_bytes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">document</span><span class="p">:</span> <span class="n">BinaryIO</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot; Provide results when document is binary data &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">analize_document</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">is_local_file</span><span class="p">(</span><span class="nb">str</span><span class="p">):</span>
</span><span class='line'>                <span class="o">...</span> <span class="c"># open the file and call self._from_bytes</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="o">...</span>  <span class="c"># call self._from_url</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">Path</span><span class="p">):</span>
</span><span class='line'>            <span class="o">...</span>  <span class="c"># open the file and call self._from_bytes</span>
</span><span class='line'>        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">):</span>
</span><span class='line'>            <span class="o">...</span> <span class="c"># call self._from_bytes</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="n">f</span><span class="s">&quot;Don&#39;t know how to handle {type(source)} :(&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the IF's quickly popped up, I could almost hear Raymond Hettinger:</p>

<p><img src="https://github.com/leogzyl/leogzyl.github.io/assets/images/better-way.png" alt="image" /></p>

<p>Luckily for us, Python provides a way to build polymorphic functions that dispatch <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch">on the type of the first argument</a> (<a href="https://docs.python.org/3/library/functools.html#functools.singledispatchmethod">or second, for methods</a>).</p>

<p>This allows us to cleanly separate each case into its own handler method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">singledispatchmethod</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">BinaryIO</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">src.utils</span> <span class="kn">import</span> <span class="n">is_local_file</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AbstractDocumentAnalyzer</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@abstractmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_from_url</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">document</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot; Provide results when document is a URL &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@abstractmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_from_bytes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">document</span><span class="p">:</span> <span class="n">BinaryIO</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot; Provide results when document is binary data &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@singledispatchmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">analize_document</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="n">f</span><span class="s">&quot;Don&#39;t know how to handle {type(source)} :(&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@analize_document.register</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source</span><span class="p">:</span> <span class="n">Path</span><span class="p">):</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_from_bytes</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@analize_document.register</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">analize_document</span><span class="p">(</span><span class="n">Path</span><span class="p">(</span><span class="n">source</span><span class="p">))</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">is_local_file</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span> <span class="bp">self</span><span class="o">.</span><span class="n">_from_url</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@analize_document.register</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source</span><span class="p">:</span> <span class="nb">bytes</span> <span class="o">|</span> <span class="n">BufferedReader</span> <span class="o">|</span> <span class="n">BytesIO</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_from_bytes</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that's a lot cleaner, isn't it?!</p>

<p>Notice how in the first implementation we <code>open</code>ed the file at two places. The improved code allows for some level of reuse (the <code>str</code> handler calls the <code>Path</code> handler).</p>

<p>Notice also that you can use union types for dispatching only after Python 3.11. For earlier versions, you must create a handler for each type.</p>

<p><font size=2>
<em>I know, there's still an IF in there, but let's not be too extreme ;)</em>
</font></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terminal Bell in PyCharm + Oh My Zsh]]></title>
    <link href="https://github.com/leogzyl/leogzyl.github.io/blog/2020/03/20/terminal-bell-in-pycharm-oh-my-zsh/"/>
    <updated>2020-03-20T12:10:00+00:00</updated>
    <id>https://github.com/leogzyl/leogzyl.github.io/blog/2020/03/20/terminal-bell-in-pycharm-oh-my-zsh</id>
    <content type="html"><![CDATA[<p>A few days ago I managed to solve an annoying issue with the PyCharm terminal. I run PyCharm on an Ubuntu virtual machine through Vagrant + X server on Windows.
At the start and end of <em>every</em> command, there was this bell/beep/notification sound.
I didn't usually care about it much since I used to keep the volume down, but I recently started working remotely and spending more time using headphones for code reviews and pair programming, so this became a pain.</p>

<p>Changing the "Audible bell" setting on Pycharm did nothing. Google wasn't helpful here either, which led me to think the problem wasn't all that common.</p>

<p>I started to suspect zsh/oh-my-zsh, so I opened up a bash terminal, and - surprise! - the beep was gone, so it had to be zsh related.</p>

<p>I disabled the sourcing of <code>$ZSH/oh-my-zsh.sh</code> in my <code>.zshrc</code> file, and - surprise again! - no beeping.</p>

<p>So the culprit was Oh My Zsh. Or, more specifically, Oh My Zsh within the PyCharm terminal. A plain Oh My Zsh console did not beep either.</p>

<p>So the following thing I did was google for the "bell" character and fiddled around a bit. I opened up a bash terminal and typed:</p>

<figure class='code'><figcaption><span>(bash.sh) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="s1">$&#39;\a&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was the sound that was driving me nuts!</p>

<p>Next, I grepped the bell character inside my <code>~/.oh-my-zsh</code> folder:</p>

<figure class='code'><figcaption><span>zsh.sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$&gt;</span> grep -R <span class="s1">&#39;\\a&#39;</span> ~/.oh-my-zsh/
</span><span class='line'>/home/vagrant/.oh-my-zsh/lib/termsupport.zsh:      print -Pn <span class="s2">&quot;\e]2;$2:q\a&quot;</span> <span class="c"># set window name</span>
</span><span class='line'>/home/vagrant/.oh-my-zsh/lib/termsupport.zsh:      print -Pn <span class="s2">&quot;\e]1;$1:q\a&quot;</span> <span class="c"># set tab name</span>
</span><span class='line'>/home/vagrant/.oh-my-zsh/lib/termsupport.zsh:        print -Pn <span class="s2">&quot;\e]2;$2:q\a&quot;</span> <span class="c"># set window name</span>
</span><span class='line'>/home/vagrant/.oh-my-zsh/lib/termsupport.zsh:        print -Pn <span class="s2">&quot;\e]1;$1:q\a&quot;</span> <span class="c"># set tab name</span>
</span><span class='line'>/home/vagrant/.oh-my-zsh/lib/termsupport.zsh:    <span class="nb">printf</span> <span class="s1">&#39;\e]7;%s\a&#39;</span> <span class="s2">&quot;file://$HOST$URL_PATH&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There were other results for plugins and themes I wasn't using, so I went and inspected the code inside the <code>termsupport.zsh</code> file:</p>

<figure class='code'><figcaption><span>termsupport.zsh (file.sh) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Set terminal window and tab/icon title                                                                                                         #</span>
</span><span class='line'><span class="c"># usage: title short_tab_title [long_window_title]</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;$DISABLE_AUTO_TITLE&quot;</span> <span class="o">==</span> <span class="nb">true</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Ok, so this a library for setting window and tab titles on terminals, somehow it's getting messed up in PyCharm, <em>and</em> there is an environment variable to disable it. But if I just export this variable on my <code>.zshrc</code> I will not have the library enabled outside PyCharm.</p>

<p>So the solution I came up with was:</p>

<figure class='code'><figcaption><span>~/.zshrc (file.sh) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">[[</span> -n <span class="s2">&quot;$INSIDE_PYCHARM&quot;</span>  <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">export </span><span class="nv">DISABLE_AUTO_TITLE</span><span class="o">=</span><span class="nb">true  </span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then on my PyCharm terminal settings for the project:</p>

<p><img src="https://github.com/leogzyl/leogzyl.github.io/assets/images/pycharm-term.png" alt="image" /></p>

<p><em>Viola!</em></p>

<p>This felt so good I just needed to share. I hope someone finds this useful sometime.</p>
]]></content>
  </entry>
  
</feed>
